#name: Build Windows Application
#
#on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#jobs:
#  build:
#    name: Build Windows Executable
#    runs-on: windows-latest
#
#    steps:
#    - name: Checkout Code
#      uses: actions/checkout@v3
#
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.12
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install pyinstaller
#        pip install -r requirements.txt
#
#    - name: Install Playwright
#      run: |
#        python -m pip install playwright
#        python -m playwright install chromium
#        python -m playwright install-deps
#
#    - name: Check Browser Installation
#      run: |
#        python -c "from playwright.sync_api import sync_playwright; print('Playwright initialized successfully')"
#
#    - name: Modify Application for Bundling
#      run: |
#        # Modify get_exact_pg.py to use bundled browser
#        echo "Adding code to handle bundled browser"
#        $content = Get-Content -Path "data_extractor\get_exact_pg.py" -Raw
#        $newContent = $content -replace "def find_chromium_executable\(\):.+?raise FileNotFoundError.+?raise", "def find_chromium_executable():`n    try:`n        if hasattr(sys, '_MEIPASS'):`n            return os.path.join(sys._MEIPASS, 'playwright', 'chromium-*', 'chrome.exe')`n        # Rest of the function remains the same`n    except Exception as e:`n        logger.error(f'Error finding Chromium executable: {e}')`n        raise"
#        $newContent | Set-Content -Path "data_extractor\get_exact_pg.py"
#
#    - name: Build with PyInstaller
#      run: |
#        pyinstaller --onefile --windowed `
#          --add-data "bills_counter;bills_counter" `
#          --hidden-import playwright `
#          --hidden-import playwright.sync_api `
#          --hidden-import playwright.async_api `
#          --collect-all playwright `
#          --icon icon.ico `
#          main.py
#
#    - name: Upload Executable
#      uses: actions/upload-artifact@v4
#      with:
#        name: windows-executable
#        path: dist/*.exe


name: Build macOS Application

on:
  push:
    branches: [ master ]  # Trigger on pushes to the main branch
  pull_request:
    branches: [ master ]  # Trigger on pull requests to the main branch

jobs:
  build-for-mac:
    runs-on: macos-latest

    steps:
      # 1. Check out the repository
      - name: Check out repository
        uses: actions/checkout@v3  # Updated from v2 to v3

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4  # Updated from v2 to v4
        with:
          python-version: "3.9"  # Specify your desired Python version

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyqt5 pyinstaller playwright pikepdf
          # Install Playwright browsers
          playwright install
      # 4. Build the application with PyInstaller
      - name: Build with PyInstaller
        run: |
          # Ensure PyInstaller spec file is correctly set up if you have one
          pyinstaller --onefile --windowed main.py
          # If your application requires additional files or resources, include them here
          # For example, if using a spec file:
          # pyinstaller your_spec_file.spec
      # 5. Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4  # Updated from v2 to v3
        with:
          name: mac-build
          path: dist/  # Ensure this path matches where PyInstaller outputs the build

      # Optional: Clean up build environment
      - name: Clean up
        run: |
          rm -rf build/
          rm -rf __pycache__/
          rm -rf dist/
          rm -f *.spec

