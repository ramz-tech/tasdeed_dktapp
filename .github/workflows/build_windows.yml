name: Build Windows Application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build Windows Executable
    runs-on: windows-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller playwright

    - name: Install Playwright Browsers
      run: |
        python -m playwright install chromium
        python -m playwright install-deps

    - name: Check Playwright Setup
      run: python -c "from playwright.sync_api import sync_playwright; print('Playwright initialized')"

    - name: Patch get_exact_pg.py for Chromium in Bundle
      shell: pwsh
      run: |
        $file = "data_extractor\get_exact_pg.py"
        $content = Get-Content -Path $file -Raw
        $patched = $content -replace "def find_chromium_executable\(\):.+?raise FileNotFoundError.+?raise", @"
def find_chromium_executable():
    try:
        if hasattr(sys, '_MEIPASS'):
            return os.path.join(sys._MEIPASS, 'playwright', 'chromium-*', 'chrome.exe')
        # Your original fallback logic here
    except Exception as e:
        logger.error(f'Error finding Chromium executable: {e}')
        raise
"@
        Set-Content -Path $file -Value $patched

    - name: Build Executable with PyInstaller
      run: |
        pyinstaller --onefile --windowed ^
          --hidden-import playwright ^
          --hidden-import playwright.sync_api ^
          --hidden-import playwright.async_api ^
          --collect-all playwright ^
          --icon icon.ico ^
          main.py

    - name: Upload Executable Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: dist/*.exe
