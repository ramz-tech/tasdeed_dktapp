name: Build Windows Application

on:
  push:
    branches: [ master ]        # Trigger on pushes to the main branch
  pull_request:
    branches: [ master ]        # Trigger on pull requests to the main branch

jobs:
  build-for-windows:
    runs-on: windows-latest

    steps:
      # 1. Check out the repository
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Cache pip dependencies (optional but recommended for faster builds)
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            # On Windows, pip cache is usually stored here
            %LOCALAPPDATA%\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 3. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"  # Specify your desired Python version

      # 4. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install

      # 5. Build the application with PyInstaller
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --windowed --add-data=bills_counter:logo.png --icon=icon.ico main.py
          # If your main script is in a subfolder, adjust the command accordingly.

      # 6. Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: |
            dist\*.exe
            # Adjust the path if PyInstaller outputs to a different directory

      # 7. Optional: Clean up build environment
      - name: Clean up
        run: |
          rmdir /S /Q build
          rmdir /S /Q dist
          del /Q *.spec
